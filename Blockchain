# import datetime library
from datetime import datetime
# import sha256
from hashlib import sha256

nonce = 0

class Block:
  def __init__(self, transactions, previous_hash, nonce=0):
    self.timestamp = datetime.now()
    self.transactions = transactions
    self.previous_hash = previous_hash
    self.nonce = nonce
    self.hash = self.generate_hash()

  def generate_hash(self):
    block_contents = str(self.timestamp) + str(self.transactions) + str(self.previous_hash) + str(self.nonce)
    block_hash = sha256(block_contents.encode())
    return block_hash.hexdigest()

  def print_block(self):
    # prints block contents
     print("timestamp:", self.timestamp)
     print("transactions:", self.transactions)
     print("current hash:", self.hash)

class Blockchain:
  def __init__(self):
    self.chain = []
    self.genesis_block()

  def genesis_block(self):
    transactions = []
    genesis_block = Block(transactions, "0")
    #genesis_block.generate_hash()
    self.chain.append(genesis_block)

  def print_blocks(self):
    for i in range(len(self.chain)):
      current_block = self.chain[i]
      print("Block {} {}".format(i, current_block))
      current_block.print_block()

  def add_block(self, transactions):
    previous_hash = (self.chain[len(self.chain)-1]).hash
    new_block = Block(transactions, previous_hash)
    new_block.generate_hash()
    self.chain.append(new_block)
    return new_block

  def validate_chain(self):
    for i in range(1, len(self.chain)):
      current = self.chain[i]
      previous = self.chain[i-1]
      if(current.hash != current.generate_hash()):
        print("The current hash of the block {} does not equal the generated hash of the block.".format(i))
        return False
      if(current.previous_hash != previous.generate_hash()):
        print("The previous block's {} hash does not equal the previous hash value stored in the current block.".format(i-1))
        return False
    return True

my_blockchain = Blockchain()
my_blockchain.print_blocks()
print("====================")

new_transactions = [{'Car1': 'AAA', 'Part1':'70', 'Part2':'50'},
                {'Car2': 'BBB', 'Part1':'60', 'part2':'40'}]

more_transactions = [{'Car3': 'AAA', 'Part1':'70', 'Part2':'50'},
                {'Car4': 'BBB', 'Part1':'60', 'part2':'40'}]

print("++++++++++++++++++")
my_blockchain.add_block(more_transactions)
my_blockchain.add_block(more_transactions)
my_blockchain.add_block(more_transactions)
my_blockchain.print_blocks()
fake_transactions = [{'CarA': 'AAA', 'Part1':'70', 'Part2':'50'},
                {'CarB': 'BBB', 'Part1':'60', 'part2':'40'}]
print("222222222222222222222222222222")
my_blockchain.chain[0].transactions = fake_transactions
my_blockchain.validate_chain()
